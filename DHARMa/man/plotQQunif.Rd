% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotResiduals.R
\name{plotQQunif}
\alias{plotQQunif}
\title{Quantile-quantile plot for a uniform distribution}
\usage{
plotQQunif(simulationOutput, testUniformity = T)
}
\arguments{
\item{simulationOutput}{a DHARMa simulation output (class DHARMa)}

\item{testUniformity}{if T, the function \code{\link{testUniformity}} will be called and the result will be added to the plot}
}
\description{
The function produces a uniform quantile-quantile plot from a DHARMa output
}
\details{
the function calls qqunif from the R package gap to create a quantile-quantile plot for a uniform distribution.
}
\examples{
testData = createData(sampleSize = 200, family = poisson(), 
                      randomEffectVariance = 0, numGroups = 5)
fittedModel <- glm(observedResponse ~ Environment1, 
                   family = "poisson", data = testData)
simulationOutput <- simulateResiduals(fittedModel = fittedModel)

######### main plotting function #############

plot(simulationOutput = simulationOutput)

#############  qq plot  ######################

plotQQunif(simulationOutput = simulationOutput)

#############  residual plots  ###############

# a single residual vs. predicte plot, various options
plotResiduals(simulationOutput, rank = T)
plotResiduals(simulationOutput, quantreg = F)

# residual vs predictors
plotResiduals(pred = testData$Environment1, residuals = simulationOutput$scaledResiduals, quantreg = F)
plotResiduals(pred = testData$time, residuals = simulationOutput$scaledResiduals, quantreg = T)

# factor vs. non factor
plotResiduals(pred = testData$group, residuals = simulationOutput$scaledResiduals, quantreg = F, asFactor = F)
plotResiduals(pred = testData$group, residuals = simulationOutput$scaledResiduals, quantreg = F, asFactor = T)

}
\seealso{
\code{\link{plotSimulatedResiduals}}, \code{\link{plotResiduals}}
}
