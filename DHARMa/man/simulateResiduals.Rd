% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulateResiduals.R
\name{simulateResiduals}
\alias{simulateResiduals}
\title{Creates scaled residuals by simulation}
\usage{
simulateResiduals(fittedModel, n = 250, refit = F, integerResponse = NULL,
  plot = F, ...)
}
\arguments{
\item{fittedModel}{fitted model object, currently restricted to lme4, lm, or glm models}

\item{n}{integer number > 1, number of simulations to run. If possible, set to at least 250, better 1000. See also details}

\item{refit}{(experimental) if T, the model will be refit with a parametric bootstrap}

\item{integerResponse}{if T, noise will be added at to the residuals to maintain a uniform expectations for integer responses (such as Poisson or Binomial). Usually, the model will automatically detect the appropriate setting, so there is no need to adjust this setting.}

\item{plot}{if T, \code{\link{plotSimulatedResiduals}} will be directly run after the simulations have terminated}

\item{...}{parameters to pass to the simulate function of the model object. An important use of this is to specify whether simulations should be conditional on the current random effect estimates. See details.}
}
\value{
A list with various objects. The most important are scaledResiduals, which contain the scaled residuals, and scaledResidualsNormal, which are the the scaled residuals transformed to a normal distribution
}
\description{
Creates scaled residuals by simulation
}
\details{
There are a number of important considerations when simulating from a more complex (hierarchical) model. The first is that in a hierarchical model, several layers of stochasticity are aligned on top of each other. Specifically, in a GLMM, we have a lower level stochastic process (random effect), whose result enters into a higher level (e.g. Poisson distribution). For other hierarchical models such as state-space models, similar considerations apply. When simulating, we have to decide if we want to re-simulate all stochastic levels, or only a subset of those. For example, in a GLMM, it is common to only simulate the last stochastic level (e.g. Poisson) conditional on the fitted random effects. 

For controlling how many levels should be re-simulated, the simulateResidual function allows to pass on parameters to the simulate function of the fitted model object. Please refer to the help of the different simulate functions (e.g. ?simulate.merMod) for details. For merMod (lme4) model objects, the relevant parameters are parameters are use.u, and re.form

The simulated residuals should be flat against all options. The most thorough testing procedure would therefore be to test all possible options. If testing only one option, I would recommend to re-simulate all levels, because this esentially tests the whole model structure together. This is the default setting in the package. A potential drawback is that re-simulating the lower-level random effects creates more variability, which may reduce power for detecing problems in the upper-level stochatic processes. 

A further complication is the treatment of inter responses. Imaging we have observed a 0, and we predict 30% zeros - what is the quantile that we should display for the residual? To deal with this problem and maintain a unifor response, the option integerResponse adds a uniform noise from -0.5 to 0.5 on the simulated and observed response. Note that this works because the expected distribution of this is flat - you can see this via hist(ecdf(runif(10000))(runif(10000))) 

About the choice of n: my simulations didn't show major problems with a small n (even down to the order of 10), but just to be on the safe side, I would recommend to use a high value (e.g. 1000)
}
\examples{
library(lme4)

testData = createData(sampleSize = 50, overdispersion = 0.5, family = poisson())
fittedModel <- glmer(observedResponse ~ Environment1 + (1|group), 
                     family = "poisson", data = testData)

simulationOutput <- simulateResiduals(fittedModel = fittedModel)
plotSimulatedResiduals(simulationOutput = simulationOutput)

# plot directly
simulationOutput <- simulateResiduals(fittedModel = fittedModel, plot = T)

# create simulations with refitting
simulationOutput <- simulateResiduals(fittedModel = fittedModel, 
                                      n = 10, refit = T, plot = T)
}
\seealso{
\code{\link{testSimulatedResiduals}}, \code{\link{plotSimulatedResiduals}}
}

